// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/lead_template/lead_template.proto

package go_micro_service_lead_template

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for LeadTemplate service

type LeadTemplateService interface {
	Create(ctx context.Context, in *NewLeadTemplateRequest, opts ...client.CallOption) (*NewLeadTemplateResponse, error)
	Get(ctx context.Context, in *LeadTemplateByIdRequest, opts ...client.CallOption) (*LeadTemplateResponse, error)
	All(ctx context.Context, in *AllLeadTemplateRequest, opts ...client.CallOption) (*LeadTemplateListResponse, error)
}

type leadTemplateService struct {
	c    client.Client
	name string
}

func NewLeadTemplateService(name string, c client.Client) LeadTemplateService {
	return &leadTemplateService{
		c:    c,
		name: name,
	}
}

func (c *leadTemplateService) Create(ctx context.Context, in *NewLeadTemplateRequest, opts ...client.CallOption) (*NewLeadTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "LeadTemplate.create", in)
	out := new(NewLeadTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadTemplateService) Get(ctx context.Context, in *LeadTemplateByIdRequest, opts ...client.CallOption) (*LeadTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "LeadTemplate.get", in)
	out := new(LeadTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadTemplateService) All(ctx context.Context, in *AllLeadTemplateRequest, opts ...client.CallOption) (*LeadTemplateListResponse, error) {
	req := c.c.NewRequest(c.name, "LeadTemplate.all", in)
	out := new(LeadTemplateListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LeadTemplate service

type LeadTemplateHandler interface {
	Create(context.Context, *NewLeadTemplateRequest, *NewLeadTemplateResponse) error
	Get(context.Context, *LeadTemplateByIdRequest, *LeadTemplateResponse) error
	All(context.Context, *AllLeadTemplateRequest, *LeadTemplateListResponse) error
}

func RegisterLeadTemplateHandler(s server.Server, hdlr LeadTemplateHandler, opts ...server.HandlerOption) error {
	type leadTemplate interface {
		Create(ctx context.Context, in *NewLeadTemplateRequest, out *NewLeadTemplateResponse) error
		Get(ctx context.Context, in *LeadTemplateByIdRequest, out *LeadTemplateResponse) error
		All(ctx context.Context, in *AllLeadTemplateRequest, out *LeadTemplateListResponse) error
	}
	type LeadTemplate struct {
		leadTemplate
	}
	h := &leadTemplateHandler{hdlr}
	return s.Handle(s.NewHandler(&LeadTemplate{h}, opts...))
}

type leadTemplateHandler struct {
	LeadTemplateHandler
}

func (h *leadTemplateHandler) Create(ctx context.Context, in *NewLeadTemplateRequest, out *NewLeadTemplateResponse) error {
	return h.LeadTemplateHandler.Create(ctx, in, out)
}

func (h *leadTemplateHandler) Get(ctx context.Context, in *LeadTemplateByIdRequest, out *LeadTemplateResponse) error {
	return h.LeadTemplateHandler.Get(ctx, in, out)
}

func (h *leadTemplateHandler) All(ctx context.Context, in *AllLeadTemplateRequest, out *LeadTemplateListResponse) error {
	return h.LeadTemplateHandler.All(ctx, in, out)
}
